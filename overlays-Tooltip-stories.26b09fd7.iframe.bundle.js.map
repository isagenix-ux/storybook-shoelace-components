{"version":3,"file":"overlays-Tooltip-stories.26b09fd7.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DA;;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACoGA;AAIA;AACA;AACA;AACA;;;;;;AAMA;;;AAGA;AACA;AACA;;;AAIA;;;ACrMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoKA;;AAWA;;;;;AAiBA;;;;;;;;;;AAqCA","sources":["webpack://shoelace-storybook/./node_modules/@shoelace-style/shoelace/dist/chunks/chunk.HLJ2JR6P.js","webpack://shoelace-storybook/./node_modules/@shoelace-style/shoelace/dist/chunks/chunk.A6P554PO.js","webpack://shoelace-storybook/./stories/overlays/Tooltip.stories.js"],"sourcesContent":["import {\n  icon_button_styles_default\n} from \"./chunk.6I2T3DLI.js\";\nimport {\n  SlIcon\n} from \"./chunk.4GJTAPTW.js\";\nimport {\n  component_styles_default\n} from \"./chunk.TUVJKY7S.js\";\nimport {\n  ShoelaceElement\n} from \"./chunk.PFOQ5QRR.js\";\nimport {\n  __decorateClass\n} from \"./chunk.KAW7D32O.js\";\n\n// src/components/icon-button/icon-button.component.ts\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { html, literal } from \"lit/static-html.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { property, query, state } from \"lit/decorators.js\";\nvar SlIconButton = class extends ShoelaceElement {\n  constructor() {\n    super(...arguments);\n    this.hasFocus = false;\n    this.label = \"\";\n    this.disabled = false;\n  }\n  handleBlur() {\n    this.hasFocus = false;\n    this.emit(\"sl-blur\");\n  }\n  handleFocus() {\n    this.hasFocus = true;\n    this.emit(\"sl-focus\");\n  }\n  handleClick(event) {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n  /** Simulates a click on the icon button. */\n  click() {\n    this.button.click();\n  }\n  /** Sets focus on the icon button. */\n  focus(options) {\n    this.button.focus(options);\n  }\n  /** Removes focus from the icon button. */\n  blur() {\n    this.button.blur();\n  }\n  render() {\n    const isLink = this.href ? true : false;\n    const tag = isLink ? literal`a` : literal`button`;\n    return html`\n      <${tag}\n        part=\"base\"\n        class=${classMap({\n      \"icon-button\": true,\n      \"icon-button--disabled\": !isLink && this.disabled,\n      \"icon-button--focused\": this.hasFocus\n    })}\n        ?disabled=${ifDefined(isLink ? void 0 : this.disabled)}\n        type=${ifDefined(isLink ? void 0 : \"button\")}\n        href=${ifDefined(isLink ? this.href : void 0)}\n        target=${ifDefined(isLink ? this.target : void 0)}\n        download=${ifDefined(isLink ? this.download : void 0)}\n        rel=${ifDefined(isLink && this.target ? \"noreferrer noopener\" : void 0)}\n        role=${ifDefined(isLink ? void 0 : \"button\")}\n        aria-disabled=${this.disabled ? \"true\" : \"false\"}\n        aria-label=\"${this.label}\"\n        tabindex=${this.disabled ? \"-1\" : \"0\"}\n        @blur=${this.handleBlur}\n        @focus=${this.handleFocus}\n        @click=${this.handleClick}\n      >\n        <sl-icon\n          class=\"icon-button__icon\"\n          name=${ifDefined(this.name)}\n          library=${ifDefined(this.library)}\n          src=${ifDefined(this.src)}\n          aria-hidden=\"true\"\n        ></sl-icon>\n      </${tag}>\n    `;\n  }\n};\nSlIconButton.styles = [component_styles_default, icon_button_styles_default];\nSlIconButton.dependencies = { \"sl-icon\": SlIcon };\n__decorateClass([\n  query(\".icon-button\")\n], SlIconButton.prototype, \"button\", 2);\n__decorateClass([\n  state()\n], SlIconButton.prototype, \"hasFocus\", 2);\n__decorateClass([\n  property()\n], SlIconButton.prototype, \"name\", 2);\n__decorateClass([\n  property()\n], SlIconButton.prototype, \"library\", 2);\n__decorateClass([\n  property()\n], SlIconButton.prototype, \"src\", 2);\n__decorateClass([\n  property()\n], SlIconButton.prototype, \"href\", 2);\n__decorateClass([\n  property()\n], SlIconButton.prototype, \"target\", 2);\n__decorateClass([\n  property()\n], SlIconButton.prototype, \"download\", 2);\n__decorateClass([\n  property()\n], SlIconButton.prototype, \"label\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], SlIconButton.prototype, \"disabled\", 2);\n\nexport {\n  SlIconButton\n};\n","import {\n  tooltip_styles_default\n} from \"./chunk.FW7UWQXB.js\";\nimport {\n  SlPopup\n} from \"./chunk.R37ISJMH.js\";\nimport {\n  getAnimation,\n  setDefaultAnimation\n} from \"./chunk.K7JGTRV7.js\";\nimport {\n  waitForEvent\n} from \"./chunk.B4BZKR24.js\";\nimport {\n  animateTo,\n  parseDuration,\n  stopAnimations\n} from \"./chunk.AJ3ENQ5C.js\";\nimport {\n  LocalizeController\n} from \"./chunk.6CTB5ZDJ.js\";\nimport {\n  watch\n} from \"./chunk.GMYPQTFK.js\";\nimport {\n  component_styles_default\n} from \"./chunk.TUVJKY7S.js\";\nimport {\n  ShoelaceElement\n} from \"./chunk.PFOQ5QRR.js\";\nimport {\n  __decorateClass\n} from \"./chunk.KAW7D32O.js\";\n\n// src/components/tooltip/tooltip.component.ts\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { html } from \"lit\";\nimport { property, query } from \"lit/decorators.js\";\nvar SlTooltip = class extends ShoelaceElement {\n  constructor() {\n    super();\n    this.localize = new LocalizeController(this);\n    this.content = \"\";\n    this.placement = \"top\";\n    this.disabled = false;\n    this.distance = 8;\n    this.open = false;\n    this.skidding = 0;\n    this.trigger = \"hover focus\";\n    this.hoist = false;\n    this.handleBlur = () => {\n      if (this.hasTrigger(\"focus\")) {\n        this.hide();\n      }\n    };\n    this.handleClick = () => {\n      if (this.hasTrigger(\"click\")) {\n        if (this.open) {\n          this.hide();\n        } else {\n          this.show();\n        }\n      }\n    };\n    this.handleFocus = () => {\n      if (this.hasTrigger(\"focus\")) {\n        this.show();\n      }\n    };\n    this.handleDocumentKeyDown = (event) => {\n      if (event.key === \"Escape\") {\n        event.stopPropagation();\n        this.hide();\n      }\n    };\n    this.handleMouseOver = () => {\n      if (this.hasTrigger(\"hover\")) {\n        const delay = parseDuration(getComputedStyle(this).getPropertyValue(\"--show-delay\"));\n        clearTimeout(this.hoverTimeout);\n        this.hoverTimeout = window.setTimeout(() => this.show(), delay);\n      }\n    };\n    this.handleMouseOut = () => {\n      if (this.hasTrigger(\"hover\")) {\n        const delay = parseDuration(getComputedStyle(this).getPropertyValue(\"--hide-delay\"));\n        clearTimeout(this.hoverTimeout);\n        this.hoverTimeout = window.setTimeout(() => this.hide(), delay);\n      }\n    };\n    this.addEventListener(\"blur\", this.handleBlur, true);\n    this.addEventListener(\"focus\", this.handleFocus, true);\n    this.addEventListener(\"click\", this.handleClick);\n    this.addEventListener(\"mouseover\", this.handleMouseOver);\n    this.addEventListener(\"mouseout\", this.handleMouseOut);\n  }\n  disconnectedCallback() {\n    var _a;\n    super.disconnectedCallback();\n    (_a = this.closeWatcher) == null ? void 0 : _a.destroy();\n    document.removeEventListener(\"keydown\", this.handleDocumentKeyDown);\n  }\n  firstUpdated() {\n    this.body.hidden = !this.open;\n    if (this.open) {\n      this.popup.active = true;\n      this.popup.reposition();\n    }\n  }\n  hasTrigger(triggerType) {\n    const triggers = this.trigger.split(\" \");\n    return triggers.includes(triggerType);\n  }\n  async handleOpenChange() {\n    var _a, _b;\n    if (this.open) {\n      if (this.disabled) {\n        return;\n      }\n      this.emit(\"sl-show\");\n      if (\"CloseWatcher\" in window) {\n        (_a = this.closeWatcher) == null ? void 0 : _a.destroy();\n        this.closeWatcher = new CloseWatcher();\n        this.closeWatcher.onclose = () => {\n          this.hide();\n        };\n      } else {\n        document.addEventListener(\"keydown\", this.handleDocumentKeyDown);\n      }\n      await stopAnimations(this.body);\n      this.body.hidden = false;\n      this.popup.active = true;\n      const { keyframes, options } = getAnimation(this, \"tooltip.show\", { dir: this.localize.dir() });\n      await animateTo(this.popup.popup, keyframes, options);\n      this.popup.reposition();\n      this.emit(\"sl-after-show\");\n    } else {\n      this.emit(\"sl-hide\");\n      (_b = this.closeWatcher) == null ? void 0 : _b.destroy();\n      document.removeEventListener(\"keydown\", this.handleDocumentKeyDown);\n      await stopAnimations(this.body);\n      const { keyframes, options } = getAnimation(this, \"tooltip.hide\", { dir: this.localize.dir() });\n      await animateTo(this.popup.popup, keyframes, options);\n      this.popup.active = false;\n      this.body.hidden = true;\n      this.emit(\"sl-after-hide\");\n    }\n  }\n  async handleOptionsChange() {\n    if (this.hasUpdated) {\n      await this.updateComplete;\n      this.popup.reposition();\n    }\n  }\n  handleDisabledChange() {\n    if (this.disabled && this.open) {\n      this.hide();\n    }\n  }\n  /** Shows the tooltip. */\n  async show() {\n    if (this.open) {\n      return void 0;\n    }\n    this.open = true;\n    return waitForEvent(this, \"sl-after-show\");\n  }\n  /** Hides the tooltip */\n  async hide() {\n    if (!this.open) {\n      return void 0;\n    }\n    this.open = false;\n    return waitForEvent(this, \"sl-after-hide\");\n  }\n  //\n  // NOTE: Tooltip is a bit unique in that we're using aria-live instead of aria-labelledby to trick screen readers into\n  // announcing the content. It works really well, but it violates an accessibility rule. We're also adding the\n  // aria-describedby attribute to a slot, which is required by <sl-popup> to correctly locate the first assigned\n  // element, otherwise positioning is incorrect.\n  //\n  render() {\n    return html`\n      <sl-popup\n        part=\"base\"\n        exportparts=\"\n          popup:base__popup,\n          arrow:base__arrow\n        \"\n        class=${classMap({\n      tooltip: true,\n      \"tooltip--open\": this.open\n    })}\n        placement=${this.placement}\n        distance=${this.distance}\n        skidding=${this.skidding}\n        strategy=${this.hoist ? \"fixed\" : \"absolute\"}\n        flip\n        shift\n        arrow\n        hover-bridge\n      >\n        ${\"\"}\n        <slot slot=\"anchor\" aria-describedby=\"tooltip\"></slot>\n\n        ${\"\"}\n        <div part=\"body\" id=\"tooltip\" class=\"tooltip__body\" role=\"tooltip\" aria-live=${this.open ? \"polite\" : \"off\"}>\n          <slot name=\"content\">${this.content}</slot>\n        </div>\n      </sl-popup>\n    `;\n  }\n};\nSlTooltip.styles = [component_styles_default, tooltip_styles_default];\nSlTooltip.dependencies = { \"sl-popup\": SlPopup };\n__decorateClass([\n  query(\"slot:not([name])\")\n], SlTooltip.prototype, \"defaultSlot\", 2);\n__decorateClass([\n  query(\".tooltip__body\")\n], SlTooltip.prototype, \"body\", 2);\n__decorateClass([\n  query(\"sl-popup\")\n], SlTooltip.prototype, \"popup\", 2);\n__decorateClass([\n  property()\n], SlTooltip.prototype, \"content\", 2);\n__decorateClass([\n  property()\n], SlTooltip.prototype, \"placement\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], SlTooltip.prototype, \"disabled\", 2);\n__decorateClass([\n  property({ type: Number })\n], SlTooltip.prototype, \"distance\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], SlTooltip.prototype, \"open\", 2);\n__decorateClass([\n  property({ type: Number })\n], SlTooltip.prototype, \"skidding\", 2);\n__decorateClass([\n  property()\n], SlTooltip.prototype, \"trigger\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], SlTooltip.prototype, \"hoist\", 2);\n__decorateClass([\n  watch(\"open\", { waitUntilFirstUpdate: true })\n], SlTooltip.prototype, \"handleOpenChange\", 1);\n__decorateClass([\n  watch([\"content\", \"distance\", \"hoist\", \"placement\", \"skidding\"])\n], SlTooltip.prototype, \"handleOptionsChange\", 1);\n__decorateClass([\n  watch(\"disabled\")\n], SlTooltip.prototype, \"handleDisabledChange\", 1);\nsetDefaultAnimation(\"tooltip.show\", {\n  keyframes: [\n    { opacity: 0, scale: 0.8 },\n    { opacity: 1, scale: 1 }\n  ],\n  options: { duration: 150, easing: \"ease\" }\n});\nsetDefaultAnimation(\"tooltip.hide\", {\n  keyframes: [\n    { opacity: 1, scale: 1 },\n    { opacity: 0, scale: 0.8 }\n  ],\n  options: { duration: 150, easing: \"ease\" }\n});\n\nexport {\n  SlTooltip\n};\n","import { html } from 'lit';\n\n// Import Shoelace components\nimport '@shoelace-style/shoelace/dist/components/tooltip/tooltip.js';\nimport '@shoelace-style/shoelace/dist/components/button/button.js';\nimport '@shoelace-style/shoelace/dist/components/icon-button/icon-button.js';\n\nconst meta = {\n  title: 'Shoelace/Overlays/Tooltip',\n  tags: ['autodocs'],\n  render: (args) => html`\n    <div style=\"padding: 100px; display: inline-block;\">\n      <sl-tooltip\n        content=${args.content}\n        placement=${args.placement || 'top'}\n        ?disabled=${args.disabled}\n        distance=${args.distance}\n        ?open=${args.open}\n        skidding=${args.skidding}\n        trigger=${args.trigger}\n        ?hoist=${args.hoist}\n        style=${args.maxWidth ? `--max-width: ${args.maxWidth};` : ''}\n      >\n        ${args.slot ? html`\n          <div slot=\"content\">${args.slot}</div>\n        ` : ''}\n        <sl-button>${args.buttonText || 'Hover Me'}</sl-button>\n      </sl-tooltip>\n    </div>\n  `,\n  argTypes: {\n    content: {\n      control: 'text',\n      description: 'The tooltip content'\n    },\n    placement: {\n      control: 'select',\n      options: [\n        'top', 'top-start', 'top-end',\n        'right', 'right-start', 'right-end',\n        'bottom', 'bottom-start', 'bottom-end',\n        'left', 'left-start', 'left-end'\n      ],\n      description: 'The preferred placement of the tooltip'\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Disables the tooltip'\n    },\n    distance: {\n      control: 'number',\n      description: 'The distance in pixels from which to offset the tooltip away from its target'\n    },\n    open: {\n      control: 'boolean',\n      description: 'Indicates whether or not the tooltip is open'\n    },\n    skidding: {\n      control: 'number',\n      description: 'The distance in pixels from which to offset the tooltip along its target'\n    },\n    trigger: {\n      control: 'select',\n      options: ['hover', 'click', 'focus', 'manual'],\n      description: 'Controls how the tooltip is triggered'\n    },\n    hoist: {\n      control: 'boolean',\n      description: 'Enable this option to prevent the tooltip from being clipped'\n    },\n    maxWidth: {\n      control: 'text',\n      description: 'The maximum width of the tooltip'\n    },\n    buttonText: {\n      control: 'text',\n      description: 'The text of the button that triggers the tooltip'\n    },\n    slot: {\n      control: 'text',\n      description: 'HTML content for the tooltip'\n    }\n  }\n};\n\nexport default meta;\n\n// Basic tooltip\nexport const Basic = {\n  args: {\n    content: 'This is a tooltip'\n  }\n};\n\n// Placement examples\nexport const Placement = {\n  render: () => html`\n    <div class=\"tooltip-placement-example\" style=\"padding: 100px;\">\n      <div class=\"tooltip-placement-example-row\">\n        <sl-tooltip content=\"top-start\" placement=\"top-start\">\n          <sl-button></sl-button>\n        </sl-tooltip>\n\n        <sl-tooltip content=\"top\" placement=\"top\">\n          <sl-button></sl-button>\n        </sl-tooltip>\n\n        <sl-tooltip content=\"top-end\" placement=\"top-end\">\n          <sl-button></sl-button>\n        </sl-tooltip>\n      </div>\n\n      <div class=\"tooltip-placement-example-row\">\n        <sl-tooltip content=\"left-start\" placement=\"left-start\">\n          <sl-button></sl-button>\n        </sl-tooltip>\n\n        <sl-tooltip content=\"right-start\" placement=\"right-start\">\n          <sl-button></sl-button>\n        </sl-tooltip>\n      </div>\n\n      <div class=\"tooltip-placement-example-row\">\n        <sl-tooltip content=\"left\" placement=\"left\">\n          <sl-button></sl-button>\n        </sl-tooltip>\n\n        <sl-tooltip content=\"right\" placement=\"right\">\n          <sl-button></sl-button>\n        </sl-tooltip>\n      </div>\n\n      <div class=\"tooltip-placement-example-row\">\n        <sl-tooltip content=\"left-end\" placement=\"left-end\">\n          <sl-button></sl-button>\n        </sl-tooltip>\n\n        <sl-tooltip content=\"right-end\" placement=\"right-end\">\n          <sl-button></sl-button>\n        </sl-tooltip>\n      </div>\n\n      <div class=\"tooltip-placement-example-row\">\n        <sl-tooltip content=\"bottom-start\" placement=\"bottom-start\">\n          <sl-button></sl-button>\n        </sl-tooltip>\n\n        <sl-tooltip content=\"bottom\" placement=\"bottom\">\n          <sl-button></sl-button>\n        </sl-tooltip>\n\n        <sl-tooltip content=\"bottom-end\" placement=\"bottom-end\">\n          <sl-button></sl-button>\n        </sl-tooltip>\n      </div>\n    </div>\n\n    <style>\n      .tooltip-placement-example {\n        width: 250px;\n      }\n\n      .tooltip-placement-example-row {\n        margin-bottom: 1rem;\n      }\n\n      .tooltip-placement-example-row:after {\n        content: '';\n        display: table;\n        clear: both;\n      }\n\n      .tooltip-placement-example sl-button {\n        float: left;\n        width: 2.5rem;\n        margin-right: 0.25rem;\n        margin-bottom: 0.25rem;\n      }\n\n      .tooltip-placement-example-row:nth-child(1) sl-tooltip:first-child sl-button,\n      .tooltip-placement-example-row:nth-child(5) sl-tooltip:first-child sl-button {\n        margin-left: calc(40px + 0.25rem);\n      }\n\n      .tooltip-placement-example-row:nth-child(2) sl-tooltip:nth-child(2) sl-button,\n      .tooltip-placement-example-row:nth-child(3) sl-tooltip:nth-child(2) sl-button,\n      .tooltip-placement-example-row:nth-child(4) sl-tooltip:nth-child(2) sl-button {\n        margin-left: calc((40px * 3) + (0.25rem * 3));\n      }\n    </style>\n  `\n};\n\n// Click trigger\nexport const ClickTrigger = {\n  args: {\n    content: 'Click again to dismiss',\n    trigger: 'click',\n    buttonText: 'Click to Toggle'\n  }\n};\n\n// Manual trigger\nexport const ManualTrigger = {\n  render: () => {\n    const handleToggle = (e) => {\n      const tooltip = e.target.nextElementSibling;\n      tooltip.open = !tooltip.open;\n    };\n\n    return html`\n      <div style=\"display: flex; gap: 4rem; padding: 50px;\">\n        <sl-button @click=${handleToggle}>Toggle Manually</sl-button>\n        <sl-tooltip content=\"This is a tooltip\" trigger=\"manual\">\n          <sl-icon-button name=\"gear\" label=\"Settings\"></sl-icon-button>\n        </sl-tooltip>\n      </div>\n    `;\n  }\n};\n\n// Remove arrow\nexport const NoArrow = {\n  args: {\n    content: 'This is a tooltip',\n    buttonText: 'No Arrow',\n    maxWidth: '0'  // This removes the arrow\n  }\n};\n\n// HTML in tooltips\nexport const HtmlContent = {\n  args: {\n    buttonText: 'Hover me',\n    slot: html`I'm not <strong>just</strong> a tooltip, I'm a <em>tooltip</em> with HTML!`\n  }\n};\n\n// Custom width\nexport const CustomWidth = {\n  args: {\n    content: 'This tooltip will wrap after only 80 pixels.',\n    maxWidth: '80px'\n  }\n};\n\n// Hoisting\nexport const Hoisting = {\n  render: () => html`\n    <div style=\"border: solid 2px var(--sl-panel-border-color); overflow: hidden; padding: 50px; position: relative;\">\n      <sl-tooltip content=\"This is a tooltip\">\n        <sl-button>No Hoist</sl-button>\n      </sl-tooltip>\n\n      <sl-tooltip content=\"This is a tooltip\" hoist>\n        <sl-button>Hoist</sl-button>\n      </sl-tooltip>\n    </div>\n  `\n}; ;export const __namedExportsOrder = [\"Basic\",\"Placement\",\"ClickTrigger\",\"ManualTrigger\",\"NoArrow\",\"HtmlContent\",\"CustomWidth\",\"Hoisting\"];"],"names":[],"sourceRoot":""}