{"version":3,"file":"forms-Checkbox-stories.bbd2fc2c.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsIA;;;;AAUA;;;;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;;;AAGA;;AAEA;AACA;;;;;;;AAOA;;;;;;;;;AASA;;;;;AAKA;;;AAIA;;AClMA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;;;;;AAyFA;;;;;;AAgBA","sources":["webpack://shoelace-version/./node_modules/@shoelace-style/shoelace/dist/chunks/chunk.AHFQSUH3.js","webpack://shoelace-version/./stories/forms/Checkbox.stories.js"],"sourcesContent":["import {\n  checkbox_styles_default\n} from \"./chunk.R3NF57O3.js\";\nimport {\n  defaultValue\n} from \"./chunk.GI7VDIWX.js\";\nimport {\n  form_control_styles_default\n} from \"./chunk.SI4ACBFK.js\";\nimport {\n  FormControlController\n} from \"./chunk.3RPBFEDE.js\";\nimport {\n  HasSlotController\n} from \"./chunk.NYIIDP5N.js\";\nimport {\n  SlIcon\n} from \"./chunk.4GJTAPTW.js\";\nimport {\n  watch\n} from \"./chunk.GMYPQTFK.js\";\nimport {\n  component_styles_default\n} from \"./chunk.TUVJKY7S.js\";\nimport {\n  ShoelaceElement\n} from \"./chunk.PFOQ5QRR.js\";\nimport {\n  __decorateClass\n} from \"./chunk.KAW7D32O.js\";\n\n// src/components/checkbox/checkbox.component.ts\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { html } from \"lit\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { live } from \"lit/directives/live.js\";\nimport { property, query, state } from \"lit/decorators.js\";\nvar SlCheckbox = class extends ShoelaceElement {\n  constructor() {\n    super(...arguments);\n    this.formControlController = new FormControlController(this, {\n      value: (control) => control.checked ? control.value || \"on\" : void 0,\n      defaultValue: (control) => control.defaultChecked,\n      setValue: (control, checked) => control.checked = checked\n    });\n    this.hasSlotController = new HasSlotController(this, \"help-text\");\n    this.hasFocus = false;\n    this.title = \"\";\n    this.name = \"\";\n    this.size = \"medium\";\n    this.disabled = false;\n    this.checked = false;\n    this.indeterminate = false;\n    this.defaultChecked = false;\n    this.form = \"\";\n    this.required = false;\n    this.helpText = \"\";\n  }\n  /** Gets the validity state object */\n  get validity() {\n    return this.input.validity;\n  }\n  /** Gets the validation message */\n  get validationMessage() {\n    return this.input.validationMessage;\n  }\n  firstUpdated() {\n    this.formControlController.updateValidity();\n  }\n  handleClick() {\n    this.checked = !this.checked;\n    this.indeterminate = false;\n    this.emit(\"sl-change\");\n  }\n  handleBlur() {\n    this.hasFocus = false;\n    this.emit(\"sl-blur\");\n  }\n  handleInput() {\n    this.emit(\"sl-input\");\n  }\n  handleInvalid(event) {\n    this.formControlController.setValidity(false);\n    this.formControlController.emitInvalidEvent(event);\n  }\n  handleFocus() {\n    this.hasFocus = true;\n    this.emit(\"sl-focus\");\n  }\n  handleDisabledChange() {\n    this.formControlController.setValidity(this.disabled);\n  }\n  handleStateChange() {\n    this.input.checked = this.checked;\n    this.input.indeterminate = this.indeterminate;\n    this.formControlController.updateValidity();\n  }\n  /** Simulates a click on the checkbox. */\n  click() {\n    this.input.click();\n  }\n  /** Sets focus on the checkbox. */\n  focus(options) {\n    this.input.focus(options);\n  }\n  /** Removes focus from the checkbox. */\n  blur() {\n    this.input.blur();\n  }\n  /** Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid. */\n  checkValidity() {\n    return this.input.checkValidity();\n  }\n  /** Gets the associated form, if one exists. */\n  getForm() {\n    return this.formControlController.getForm();\n  }\n  /** Checks for validity and shows the browser's validation message if the control is invalid. */\n  reportValidity() {\n    return this.input.reportValidity();\n  }\n  /**\n   * Sets a custom validation message. The value provided will be shown to the user when the form is submitted. To clear\n   * the custom validation message, call this method with an empty string.\n   */\n  setCustomValidity(message) {\n    this.input.setCustomValidity(message);\n    this.formControlController.updateValidity();\n  }\n  render() {\n    const hasHelpTextSlot = this.hasSlotController.test(\"help-text\");\n    const hasHelpText = this.helpText ? true : !!hasHelpTextSlot;\n    return html`\n      <div\n        class=${classMap({\n      \"form-control\": true,\n      \"form-control--small\": this.size === \"small\",\n      \"form-control--medium\": this.size === \"medium\",\n      \"form-control--large\": this.size === \"large\",\n      \"form-control--has-help-text\": hasHelpText\n    })}\n      >\n        <label\n          part=\"base\"\n          class=${classMap({\n      checkbox: true,\n      \"checkbox--checked\": this.checked,\n      \"checkbox--disabled\": this.disabled,\n      \"checkbox--focused\": this.hasFocus,\n      \"checkbox--indeterminate\": this.indeterminate,\n      \"checkbox--small\": this.size === \"small\",\n      \"checkbox--medium\": this.size === \"medium\",\n      \"checkbox--large\": this.size === \"large\"\n    })}\n        >\n          <input\n            class=\"checkbox__input\"\n            type=\"checkbox\"\n            title=${this.title}\n            name=${this.name}\n            value=${ifDefined(this.value)}\n            .indeterminate=${live(this.indeterminate)}\n            .checked=${live(this.checked)}\n            .disabled=${this.disabled}\n            .required=${this.required}\n            aria-checked=${this.checked ? \"true\" : \"false\"}\n            aria-describedby=\"help-text\"\n            @click=${this.handleClick}\n            @input=${this.handleInput}\n            @invalid=${this.handleInvalid}\n            @blur=${this.handleBlur}\n            @focus=${this.handleFocus}\n          />\n\n          <span\n            part=\"control${this.checked ? \" control--checked\" : \"\"}${this.indeterminate ? \" control--indeterminate\" : \"\"}\"\n            class=\"checkbox__control\"\n          >\n            ${this.checked ? html`\n                  <sl-icon part=\"checked-icon\" class=\"checkbox__checked-icon\" library=\"system\" name=\"check\"></sl-icon>\n                ` : \"\"}\n            ${!this.checked && this.indeterminate ? html`\n                  <sl-icon\n                    part=\"indeterminate-icon\"\n                    class=\"checkbox__indeterminate-icon\"\n                    library=\"system\"\n                    name=\"indeterminate\"\n                  ></sl-icon>\n                ` : \"\"}\n          </span>\n\n          <div part=\"label\" class=\"checkbox__label\">\n            <slot></slot>\n          </div>\n        </label>\n\n        <div\n          aria-hidden=${hasHelpText ? \"false\" : \"true\"}\n          class=\"form-control__help-text\"\n          id=\"help-text\"\n          part=\"form-control-help-text\"\n        >\n          <slot name=\"help-text\">${this.helpText}</slot>\n        </div>\n      </div>\n    `;\n  }\n};\nSlCheckbox.styles = [component_styles_default, form_control_styles_default, checkbox_styles_default];\nSlCheckbox.dependencies = { \"sl-icon\": SlIcon };\n__decorateClass([\n  query('input[type=\"checkbox\"]')\n], SlCheckbox.prototype, \"input\", 2);\n__decorateClass([\n  state()\n], SlCheckbox.prototype, \"hasFocus\", 2);\n__decorateClass([\n  property()\n], SlCheckbox.prototype, \"title\", 2);\n__decorateClass([\n  property()\n], SlCheckbox.prototype, \"name\", 2);\n__decorateClass([\n  property()\n], SlCheckbox.prototype, \"value\", 2);\n__decorateClass([\n  property({ reflect: true })\n], SlCheckbox.prototype, \"size\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], SlCheckbox.prototype, \"disabled\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], SlCheckbox.prototype, \"checked\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], SlCheckbox.prototype, \"indeterminate\", 2);\n__decorateClass([\n  defaultValue(\"checked\")\n], SlCheckbox.prototype, \"defaultChecked\", 2);\n__decorateClass([\n  property({ reflect: true })\n], SlCheckbox.prototype, \"form\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], SlCheckbox.prototype, \"required\", 2);\n__decorateClass([\n  property({ attribute: \"help-text\" })\n], SlCheckbox.prototype, \"helpText\", 2);\n__decorateClass([\n  watch(\"disabled\", { waitUntilFirstUpdate: true })\n], SlCheckbox.prototype, \"handleDisabledChange\", 1);\n__decorateClass([\n  watch([\"checked\", \"indeterminate\"], { waitUntilFirstUpdate: true })\n], SlCheckbox.prototype, \"handleStateChange\", 1);\n\nexport {\n  SlCheckbox\n};\n","import { html } from 'lit';\n\n// Import Shoelace components\nimport '@shoelace-style/shoelace/dist/components/checkbox/checkbox.js';\nimport '@shoelace-style/shoelace/dist/components/button/button.js';\nimport '@shoelace-style/shoelace/dist/components/icon/icon.js';\n\nconst meta = {\n  title: 'Shoelace/Forms/Checkbox',\n  tags: ['autodocs'],\n  render: (args) => html`\n    <sl-checkbox\n      ?checked=${args.checked}\n      ?disabled=${args.disabled}\n      ?indeterminate=${args.indeterminate}\n      ?required=${args.required}\n      size=${args.size}\n      help-text=${args.helpText || ''}\n    >\n      ${args.label}\n    </sl-checkbox>\n  `,\n  argTypes: {\n    size: {\n      control: 'select',\n      options: ['small', 'medium', 'large'],\n      description: 'The checkbox\\'s size.',\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: 'medium' }\n      }\n    },\n    checked: { \n      control: 'boolean',\n      description: 'Draws the checkbox in a checked state.'\n    },\n    disabled: { \n      control: 'boolean',\n      description: 'Disables the checkbox.'\n    },\n    indeterminate: { \n      control: 'boolean',\n      description: 'Draws the checkbox in an indeterminate state.'\n    },\n    required: { \n      control: 'boolean',\n      description: 'Makes the checkbox a required field.'\n    },\n    label: { \n      control: 'text',\n      description: 'The checkbox label.'\n    },\n    helpText: { \n      control: 'text',\n      description: 'The help text below the checkbox.'\n    }\n  },\n  parameters: {\n    docs: {\n      description: {\n        component: 'Checkboxes allow the user to toggle an option on or off.'\n      }\n    }\n  }\n};\n\nexport default meta;\n\n// Basic checkbox\nexport const Basic = {\n  args: {\n    label: 'Checkbox'\n  }\n};\n\n// Checked\nexport const Checked = {\n  args: {\n    label: 'Checked',\n    checked: true\n  }\n};\n\n// Indeterminate\nexport const Indeterminate = {\n  args: {\n    label: 'Indeterminate',\n    indeterminate: true\n  }\n};\n\n// Disabled\nexport const Disabled = {\n  args: {\n    label: 'Disabled',\n    disabled: true\n  }\n};\n\n// Sizes\nexport const Sizes = {\n  render: () => html`\n    <div style=\"display: flex; flex-direction: column; gap: 1rem;\">\n      <sl-checkbox size=\"small\">Small</sl-checkbox>\n      <sl-checkbox size=\"medium\">Medium</sl-checkbox>\n      <sl-checkbox size=\"large\">Large</sl-checkbox>\n    </div>\n  `\n};\n\n// With Help Text\nexport const WithHelpText = {\n  args: {\n    label: 'Checkbox',\n    helpText: 'This is the help text for this checkbox.'\n  }\n};\n\n// Custom Validation\nexport const CustomValidation = {\n  render: () => html`\n    <form>\n      <sl-checkbox required>Check me</sl-checkbox>\n      <br><br>\n      <sl-button type=\"submit\" variant=\"primary\">Submit</sl-button>\n    </form>\n  `\n}; ;export const __namedExportsOrder = [\"Basic\",\"Checked\",\"Indeterminate\",\"Disabled\",\"Sizes\",\"WithHelpText\",\"CustomValidation\"];"],"names":[],"sourceRoot":""}