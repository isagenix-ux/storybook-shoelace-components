{"version":3,"file":"overlays-Dialog-stories.f47cdff48a113a27ddb3.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://shoelace-storybook/./stories/overlays/Dialog.stories.js"],"sourcesContent":["import { html } from 'lit';\n\n// Import Shoelace components\nimport '@shoelace-style/shoelace/dist/components/dialog/dialog.js';\nimport '@shoelace-style/shoelace/dist/components/button/button.js';\nimport '@shoelace-style/shoelace/dist/components/icon-button/icon-button.js';\nimport '@shoelace-style/shoelace/dist/components/input/input.js';\nimport '@shoelace-style/shoelace/dist/components/rating/rating.js';\n\nconst meta = {\n  title: 'Shoelace/Overlays/Dialog',\n  tags: ['autodocs'],\n  render: (args) => {\n    // Generate a unique ID for each dialog instance\n    const dialogId = `dialog-${Math.random().toString(36).substr(2, 9)}`;\n    \n    const handleOpen = (e) => {\n      const dialog = e.target.parentElement.querySelector('sl-dialog');\n      dialog.show();\n    };\n\n    const handleClose = (e) => {\n      const dialog = e.target.closest('sl-dialog');\n      dialog.hide();\n    };\n\n    return html`\n      <div>\n        <sl-dialog \n          label=${args.label}\n          ?no-header=${args.noHeader}\n          style=${args.customWidth ? '--width: 50vw;' : ''}\n        >\n          ${args.headerActions ? html`\n            <sl-icon-button\n              slot=\"header-actions\"\n              name=\"box-arrow-up-right\"\n              label=\"Open in new window\"\n            ></sl-icon-button>\n          ` : ''}\n\n          ${args.content}\n          \n          <div slot=\"footer\">\n            ${typeof args.footer === 'string' \n              ? html`<sl-button variant=\"primary\" @click=${handleClose}>Close</sl-button>`\n              : args.footer\n            }\n          </div>\n        </sl-dialog>\n\n        <sl-button @click=${handleOpen}>Open Dialog</sl-button>\n      </div>\n    `;\n  },\n  argTypes: {\n    label: { \n      control: 'text',\n      description: 'The dialog title',\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: 'Dialog' }\n      }\n    },\n    noHeader: { \n      control: 'boolean',\n      description: 'Removes the header. This will also remove the default close button.',\n      table: {\n        type: { summary: 'boolean' },\n        defaultValue: { summary: false }\n      }\n    },\n    content: { \n      control: 'text',\n      description: 'The dialog content',\n      table: {\n        type: { summary: 'string | TemplateResult' }\n      }\n    },\n    headerActions: { \n      control: 'boolean',\n      description: 'Shows additional actions in the header',\n      table: {\n        type: { summary: 'boolean' },\n        defaultValue: { summary: false }\n      }\n    },\n    customWidth: { \n      control: 'boolean',\n      description: 'Sets a custom width for the dialog',\n      table: {\n        type: { summary: 'boolean' },\n        defaultValue: { summary: false }\n      }\n    },\n    footer: { control: 'text' }\n  },\n  parameters: {\n    docs: {\n      description: {\n        component: `\n          Dialogs, sometimes called \"modals\", appear above the page and require the user's immediate attention.\n          \n          Use dialogs for:\n          - Displaying important information\n          - Getting confirmation before a destructive action\n          - Complex forms or settings that deserve their own page\n        `\n      },\n      story: {\n        height: '400px', // Set a minimum height for story containers\n        iframeHeight: 400, // Set iframe height\n        inline: false // Force stories to render in iframes\n      }\n    },\n    layout: 'centered',\n    viewport: {\n      defaultViewport: 'responsive'\n    }\n  }\n};\n\nexport default meta;\n\n// Basic dialog\nexport const Basic = {\n  args: {\n    label: 'Dialog',\n    content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.'\n  }\n};\n\n// Custom width\nexport const CustomWidth = {\n  args: {\n    label: 'Dialog',\n    content: 'This dialog is wider than the default.',\n    customWidth: true\n  }\n};\n\n// With header actions\nexport const WithHeaderActions = {\n  args: {\n    label: 'Dialog',\n    headerActions: true,\n    content: 'This dialog has an additional action in the header.'\n  }\n};\n\n// Scrolling dialog\nexport const Scrolling = {\n  args: {\n    label: 'Dialog',\n    content: html`\n      <div style=\"height: 150vh; border: dashed 2px var(--sl-color-neutral-200); padding: 0 1rem;\">\n        <p>Scroll down and give it a try! ðŸ‘‡</p>\n      </div>\n    `\n  }\n};\n\n// With autofocus\nexport const WithAutofocus = {\n  args: {\n    label: 'Dialog',\n    content: html`\n      <sl-input autofocus placeholder=\"I will have focus when the dialog is opened\"></sl-input>\n    `\n  }\n};\n\n// Complex example\nexport const Complex = {\n  args: {\n    label: 'Dialog',\n    content: html`\n      <sl-rating></sl-rating>\n      <br><br>\n      This is a more complex dialog that demonstrates some of the advanced features and components working together.\n      <br><br>\n      <sl-input placeholder=\"Type something\"></sl-input>\n    `,\n    footer: html`\n      <sl-button variant=\"neutral\" @click=${(e) => e.target.closest('sl-dialog').hide()}>Cancel</sl-button>\n      <sl-button variant=\"primary\" @click=${(e) => e.target.closest('sl-dialog').hide()}>Save</sl-button>\n    `\n  }\n}; ;export const __namedExportsOrder = [\"Basic\",\"CustomWidth\",\"WithHeaderActions\",\"Scrolling\",\"WithAutofocus\",\"Complex\"];"],"names":[],"sourceRoot":""}