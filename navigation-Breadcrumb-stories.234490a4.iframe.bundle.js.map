{"version":3,"file":"navigation-Breadcrumb-stories.234490a4.iframe.bundle.js","mappings":";;;;;;;AA+DA;AACA;;;;;AAKA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;;;;;;AAUA;;;;AAIA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;;;;;;;;;AAWA;;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;AAmEA;;;;;;;;;;;;;;;;;;AA0CA","sources":["webpack://shoelace-version/./node_modules/@shoelace-style/shoelace/dist/chunks/chunk.SQLKQL5A.js","webpack://shoelace-version/./node_modules/@shoelace-style/shoelace/dist/chunks/chunk.RCNTVK6L.js","webpack://shoelace-version/./stories/navigation/Breadcrumb.stories.js"],"sourcesContent":["import {\n  breadcrumb_styles_default\n} from \"./chunk.P4NYDBZP.js\";\nimport {\n  LocalizeController\n} from \"./chunk.6CTB5ZDJ.js\";\nimport {\n  SlIcon\n} from \"./chunk.4GJTAPTW.js\";\nimport {\n  component_styles_default\n} from \"./chunk.TUVJKY7S.js\";\nimport {\n  ShoelaceElement\n} from \"./chunk.PFOQ5QRR.js\";\nimport {\n  __decorateClass\n} from \"./chunk.KAW7D32O.js\";\n\n// src/components/breadcrumb/breadcrumb.component.ts\nimport { html } from \"lit\";\nimport { property, query } from \"lit/decorators.js\";\nvar SlBreadcrumb = class extends ShoelaceElement {\n  constructor() {\n    super(...arguments);\n    this.localize = new LocalizeController(this);\n    this.separatorDir = this.localize.dir();\n    this.label = \"\";\n  }\n  // Generates a clone of the separator element to use for each breadcrumb item\n  getSeparator() {\n    const separator = this.separatorSlot.assignedElements({ flatten: true })[0];\n    const clone = separator.cloneNode(true);\n    [clone, ...clone.querySelectorAll(\"[id]\")].forEach((el) => el.removeAttribute(\"id\"));\n    clone.setAttribute(\"data-default\", \"\");\n    clone.slot = \"separator\";\n    return clone;\n  }\n  handleSlotChange() {\n    const items = [...this.defaultSlot.assignedElements({ flatten: true })].filter(\n      (item) => item.tagName.toLowerCase() === \"sl-breadcrumb-item\"\n    );\n    items.forEach((item, index) => {\n      const separator = item.querySelector('[slot=\"separator\"]');\n      if (separator === null) {\n        item.append(this.getSeparator());\n      } else if (separator.hasAttribute(\"data-default\")) {\n        separator.replaceWith(this.getSeparator());\n      } else {\n      }\n      if (index === items.length - 1) {\n        item.setAttribute(\"aria-current\", \"page\");\n      } else {\n        item.removeAttribute(\"aria-current\");\n      }\n    });\n  }\n  render() {\n    if (this.separatorDir !== this.localize.dir()) {\n      this.separatorDir = this.localize.dir();\n      this.updateComplete.then(() => this.handleSlotChange());\n    }\n    return html`\n      <nav part=\"base\" class=\"breadcrumb\" aria-label=${this.label}>\n        <slot @slotchange=${this.handleSlotChange}></slot>\n      </nav>\n\n      <span hidden aria-hidden=\"true\">\n        <slot name=\"separator\">\n          <sl-icon name=${this.localize.dir() === \"rtl\" ? \"chevron-left\" : \"chevron-right\"} library=\"system\"></sl-icon>\n        </slot>\n      </span>\n    `;\n  }\n};\nSlBreadcrumb.styles = [component_styles_default, breadcrumb_styles_default];\nSlBreadcrumb.dependencies = { \"sl-icon\": SlIcon };\n__decorateClass([\n  query(\"slot\")\n], SlBreadcrumb.prototype, \"defaultSlot\", 2);\n__decorateClass([\n  query('slot[name=\"separator\"]')\n], SlBreadcrumb.prototype, \"separatorSlot\", 2);\n__decorateClass([\n  property()\n], SlBreadcrumb.prototype, \"label\", 2);\n\nexport {\n  SlBreadcrumb\n};\n","import {\n  breadcrumb_item_styles_default\n} from \"./chunk.Q5P7Y2HU.js\";\nimport {\n  HasSlotController\n} from \"./chunk.NYIIDP5N.js\";\nimport {\n  watch\n} from \"./chunk.GMYPQTFK.js\";\nimport {\n  component_styles_default\n} from \"./chunk.TUVJKY7S.js\";\nimport {\n  ShoelaceElement\n} from \"./chunk.PFOQ5QRR.js\";\nimport {\n  __decorateClass\n} from \"./chunk.KAW7D32O.js\";\n\n// src/components/breadcrumb-item/breadcrumb-item.component.ts\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { html } from \"lit\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { property, query, state } from \"lit/decorators.js\";\nvar SlBreadcrumbItem = class extends ShoelaceElement {\n  constructor() {\n    super(...arguments);\n    this.hasSlotController = new HasSlotController(this, \"prefix\", \"suffix\");\n    this.renderType = \"button\";\n    this.rel = \"noreferrer noopener\";\n  }\n  setRenderType() {\n    const hasDropdown = this.defaultSlot.assignedElements({ flatten: true }).filter((i) => i.tagName.toLowerCase() === \"sl-dropdown\").length > 0;\n    if (this.href) {\n      this.renderType = \"link\";\n      return;\n    }\n    if (hasDropdown) {\n      this.renderType = \"dropdown\";\n      return;\n    }\n    this.renderType = \"button\";\n  }\n  hrefChanged() {\n    this.setRenderType();\n  }\n  handleSlotChange() {\n    this.setRenderType();\n  }\n  render() {\n    return html`\n      <div\n        part=\"base\"\n        class=${classMap({\n      \"breadcrumb-item\": true,\n      \"breadcrumb-item--has-prefix\": this.hasSlotController.test(\"prefix\"),\n      \"breadcrumb-item--has-suffix\": this.hasSlotController.test(\"suffix\")\n    })}\n      >\n        <span part=\"prefix\" class=\"breadcrumb-item__prefix\">\n          <slot name=\"prefix\"></slot>\n        </span>\n\n        ${this.renderType === \"link\" ? html`\n              <a\n                part=\"label\"\n                class=\"breadcrumb-item__label breadcrumb-item__label--link\"\n                href=\"${this.href}\"\n                target=\"${ifDefined(this.target ? this.target : void 0)}\"\n                rel=${ifDefined(this.target ? this.rel : void 0)}\n              >\n                <slot @slotchange=${this.handleSlotChange}></slot>\n              </a>\n            ` : \"\"}\n        ${this.renderType === \"button\" ? html`\n              <button part=\"label\" type=\"button\" class=\"breadcrumb-item__label breadcrumb-item__label--button\">\n                <slot @slotchange=${this.handleSlotChange}></slot>\n              </button>\n            ` : \"\"}\n        ${this.renderType === \"dropdown\" ? html`\n              <div part=\"label\" class=\"breadcrumb-item__label breadcrumb-item__label--drop-down\">\n                <slot @slotchange=${this.handleSlotChange}></slot>\n              </div>\n            ` : \"\"}\n\n        <span part=\"suffix\" class=\"breadcrumb-item__suffix\">\n          <slot name=\"suffix\"></slot>\n        </span>\n\n        <span part=\"separator\" class=\"breadcrumb-item__separator\" aria-hidden=\"true\">\n          <slot name=\"separator\"></slot>\n        </span>\n      </div>\n    `;\n  }\n};\nSlBreadcrumbItem.styles = [component_styles_default, breadcrumb_item_styles_default];\n__decorateClass([\n  query(\"slot:not([name])\")\n], SlBreadcrumbItem.prototype, \"defaultSlot\", 2);\n__decorateClass([\n  state()\n], SlBreadcrumbItem.prototype, \"renderType\", 2);\n__decorateClass([\n  property()\n], SlBreadcrumbItem.prototype, \"href\", 2);\n__decorateClass([\n  property()\n], SlBreadcrumbItem.prototype, \"target\", 2);\n__decorateClass([\n  property()\n], SlBreadcrumbItem.prototype, \"rel\", 2);\n__decorateClass([\n  watch(\"href\", { waitUntilFirstUpdate: true })\n], SlBreadcrumbItem.prototype, \"hrefChanged\", 1);\n\nexport {\n  SlBreadcrumbItem\n};\n","import { html } from 'lit';\n\n// Import Shoelace components\nimport '@shoelace-style/shoelace/dist/components/breadcrumb/breadcrumb.js';\nimport '@shoelace-style/shoelace/dist/components/breadcrumb-item/breadcrumb-item.js';\nimport '@shoelace-style/shoelace/dist/components/icon/icon.js';\nimport '@shoelace-style/shoelace/dist/components/dropdown/dropdown.js';\nimport '@shoelace-style/shoelace/dist/components/menu/menu.js';\nimport '@shoelace-style/shoelace/dist/components/menu-item/menu-item.js';\nimport '@shoelace-style/shoelace/dist/components/button/button.js';\n\nconst meta = {\n  title: 'Shoelace/Navigation/Breadcrumb',\n  tags: ['autodocs'],\n  render: (args) => html`\n    <sl-breadcrumb>\n      ${args.separator ? html`\n        <sl-icon name=${args.separator} slot=\"separator\"></sl-icon>\n      ` : ''}\n      ${args.items.map(item => html`\n        <sl-breadcrumb-item href=${item.href || ''}>\n          ${item.prefix ? html`\n            <sl-icon slot=\"prefix\" name=${item.prefix}></sl-icon>\n          ` : ''}\n          ${item.label}\n          ${item.suffix ? html`\n            <sl-icon slot=\"suffix\" name=${item.suffix}></sl-icon>\n          ` : ''}\n        </sl-breadcrumb-item>\n      `)}\n    </sl-breadcrumb>\n  `,\n  argTypes: {\n    items: {\n      control: 'object',\n      description: 'Array of breadcrumb items'\n    },\n    separator: {\n      control: 'text',\n      description: 'Icon name for the separator'\n    }\n  }\n};\n\nexport default meta;\n\n// Basic breadcrumb\nexport const Basic = {\n  args: {\n    items: [\n      { label: 'Catalog' },\n      { label: 'Clothing' },\n      { label: \"Women's\" },\n      { label: 'Shirts & Tops' }\n    ]\n  }\n};\n\n// With links\nexport const WithLinks = {\n  args: {\n    items: [\n      { label: 'Homepage', href: 'https://example.com/home' },\n      { label: 'Our Services', href: 'https://example.com/services' },\n      { label: 'Digital Media', href: 'https://example.com/digital' },\n      { label: 'Web Design', href: 'https://example.com/web-design' }\n    ]\n  }\n};\n\n// Custom separators\nexport const CustomSeparators = {\n  render: () => html`\n    <div style=\"display: flex; flex-direction: column; gap: 1rem;\">\n      <sl-breadcrumb>\n        <sl-icon name=\"dot\" slot=\"separator\"></sl-icon>\n        <sl-breadcrumb-item>First</sl-breadcrumb-item>\n        <sl-breadcrumb-item>Second</sl-breadcrumb-item>\n        <sl-breadcrumb-item>Third</sl-breadcrumb-item>\n      </sl-breadcrumb>\n\n      <sl-breadcrumb>\n        <sl-icon name=\"arrow-right\" slot=\"separator\"></sl-icon>\n        <sl-breadcrumb-item>First</sl-breadcrumb-item>\n        <sl-breadcrumb-item>Second</sl-breadcrumb-item>\n        <sl-breadcrumb-item>Third</sl-breadcrumb-item>\n      </sl-breadcrumb>\n\n      <sl-breadcrumb>\n        <span slot=\"separator\">/</span>\n        <sl-breadcrumb-item>First</sl-breadcrumb-item>\n        <sl-breadcrumb-item>Second</sl-breadcrumb-item>\n        <sl-breadcrumb-item>Third</sl-breadcrumb-item>\n      </sl-breadcrumb>\n    </div>\n  `\n};\n\n// With prefixes\nexport const WithPrefixes = {\n  args: {\n    items: [\n      { label: 'Home', prefix: 'house' },\n      { label: 'Articles' },\n      { label: 'Traveling' }\n    ]\n  }\n};\n\n// With suffixes\nexport const WithSuffixes = {\n  args: {\n    items: [\n      { label: 'Documents' },\n      { label: 'Policies' },\n      { label: 'Security', suffix: 'shield-lock' }\n    ]\n  }\n};\n\n// With dropdown\nexport const WithDropdown = {\n  render: () => html`\n    <sl-breadcrumb>\n      <sl-breadcrumb-item>Homepage</sl-breadcrumb-item>\n      <sl-breadcrumb-item>\n        <sl-dropdown>\n          <sl-button slot=\"trigger\" size=\"small\" circle>\n            <sl-icon label=\"More options\" name=\"three-dots\"></sl-icon>\n          </sl-button>\n          <sl-menu>\n            <sl-menu-item type=\"checkbox\" checked>Web Design</sl-menu-item>\n            <sl-menu-item type=\"checkbox\">Web Development</sl-menu-item>\n            <sl-menu-item type=\"checkbox\">Marketing</sl-menu-item>\n          </sl-menu>\n        </sl-dropdown>\n      </sl-breadcrumb-item>\n      <sl-breadcrumb-item>Our Services</sl-breadcrumb-item>\n      <sl-breadcrumb-item>Digital Media</sl-breadcrumb-item>\n    </sl-breadcrumb>\n  `\n}; ;export const __namedExportsOrder = [\"Basic\",\"WithLinks\",\"CustomSeparators\",\"WithPrefixes\",\"WithSuffixes\",\"WithDropdown\"];"],"names":[],"sourceRoot":""}