{"version":3,"file":"forms-RadioGroup-stories.36b2b74e.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA;;AAUA;AACA;;;;;AAMA;AC7EA;;;;;;;;;;;;;;;;;;;;;;;;;;AC8DA;;AAEA;AACA;AAeA;;AAEA;AACA;AACA;AACA;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpFA;;;;AA4CA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;ACoLA;AAEA;;;AAGA;;;;;;;;;;AAkBA;AACA;;AAEA;;;;;AAKA;;;;;AAKA;;;AAGA;;;;;AAKA;;AAEA;;AAEA;;;;;;;AAOA;;AAEA;;;AAIA;;AC1SA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;;AAGA;;;;AAMA;;;;;;;;;;;;;;;;;;;;AAiGA;;;;;;;;;;AAYA","sources":["webpack://shoelace-storybook/./node_modules/@shoelace-style/shoelace/dist/chunks/chunk.BHEXBFEQ.js","webpack://shoelace-storybook/./node_modules/@shoelace-style/shoelace/dist/chunks/chunk.2P5EQCYK.js","webpack://shoelace-storybook/./node_modules/@shoelace-style/shoelace/dist/chunks/chunk.ONKYEDUJ.js","webpack://shoelace-storybook/./node_modules/@shoelace-style/shoelace/dist/chunks/chunk.UEYUGH42.js","webpack://shoelace-storybook/./node_modules/@shoelace-style/shoelace/dist/chunks/chunk.GV6SB2T4.js","webpack://shoelace-storybook/./stories/forms/RadioGroup.stories.js"],"sourcesContent":["import {\n  radio_styles_default\n} from \"./chunk.FKMWLPHV.js\";\nimport {\n  SlIcon\n} from \"./chunk.4GJTAPTW.js\";\nimport {\n  watch\n} from \"./chunk.GMYPQTFK.js\";\nimport {\n  component_styles_default\n} from \"./chunk.TUVJKY7S.js\";\nimport {\n  ShoelaceElement\n} from \"./chunk.PFOQ5QRR.js\";\nimport {\n  __decorateClass\n} from \"./chunk.KAW7D32O.js\";\n\n// src/components/radio/radio.component.ts\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { html } from \"lit\";\nimport { property, state } from \"lit/decorators.js\";\nvar SlRadio = class extends ShoelaceElement {\n  constructor() {\n    super();\n    this.checked = false;\n    this.hasFocus = false;\n    this.size = \"medium\";\n    this.disabled = false;\n    this.handleBlur = () => {\n      this.hasFocus = false;\n      this.emit(\"sl-blur\");\n    };\n    this.handleClick = () => {\n      if (!this.disabled) {\n        this.checked = true;\n      }\n    };\n    this.handleFocus = () => {\n      this.hasFocus = true;\n      this.emit(\"sl-focus\");\n    };\n    this.addEventListener(\"blur\", this.handleBlur);\n    this.addEventListener(\"click\", this.handleClick);\n    this.addEventListener(\"focus\", this.handleFocus);\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.setInitialAttributes();\n  }\n  setInitialAttributes() {\n    this.setAttribute(\"role\", \"radio\");\n    this.setAttribute(\"tabindex\", \"-1\");\n    this.setAttribute(\"aria-disabled\", this.disabled ? \"true\" : \"false\");\n  }\n  handleCheckedChange() {\n    this.setAttribute(\"aria-checked\", this.checked ? \"true\" : \"false\");\n    this.setAttribute(\"tabindex\", this.checked ? \"0\" : \"-1\");\n  }\n  handleDisabledChange() {\n    this.setAttribute(\"aria-disabled\", this.disabled ? \"true\" : \"false\");\n  }\n  render() {\n    return html`\n      <span\n        part=\"base\"\n        class=${classMap({\n      radio: true,\n      \"radio--checked\": this.checked,\n      \"radio--disabled\": this.disabled,\n      \"radio--focused\": this.hasFocus,\n      \"radio--small\": this.size === \"small\",\n      \"radio--medium\": this.size === \"medium\",\n      \"radio--large\": this.size === \"large\"\n    })}\n      >\n        <span part=\"${`control${this.checked ? \" control--checked\" : \"\"}`}\" class=\"radio__control\">\n          ${this.checked ? html` <sl-icon part=\"checked-icon\" class=\"radio__checked-icon\" library=\"system\" name=\"radio\"></sl-icon> ` : \"\"}\n        </span>\n\n        <slot part=\"label\" class=\"radio__label\"></slot>\n      </span>\n    `;\n  }\n};\nSlRadio.styles = [component_styles_default, radio_styles_default];\nSlRadio.dependencies = { \"sl-icon\": SlIcon };\n__decorateClass([\n  state()\n], SlRadio.prototype, \"checked\", 2);\n__decorateClass([\n  state()\n], SlRadio.prototype, \"hasFocus\", 2);\n__decorateClass([\n  property()\n], SlRadio.prototype, \"value\", 2);\n__decorateClass([\n  property({ reflect: true })\n], SlRadio.prototype, \"size\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], SlRadio.prototype, \"disabled\", 2);\n__decorateClass([\n  watch(\"checked\")\n], SlRadio.prototype, \"handleCheckedChange\", 1);\n__decorateClass([\n  watch(\"disabled\", { waitUntilFirstUpdate: true })\n], SlRadio.prototype, \"handleDisabledChange\", 1);\n\nexport {\n  SlRadio\n};\n","import {\n  button_styles_default\n} from \"./chunk.MAQXLKQ7.js\";\n\n// src/components/radio-button/radio-button.styles.ts\nimport { css } from \"lit\";\nvar radio_button_styles_default = css`\n  ${button_styles_default}\n\n  .button__prefix,\n  .button__suffix,\n  .button__label {\n    display: inline-flex;\n    position: relative;\n    align-items: center;\n  }\n\n  /* We use a hidden input so constraint validation errors work, since they don't appear to show when used with buttons.\n    We can't actually hide it, though, otherwise the messages will be suppressed by the browser. */\n  .hidden-input {\n    all: unset;\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    outline: dotted 1px red;\n    opacity: 0;\n    z-index: -1;\n  }\n`;\n\nexport {\n  radio_button_styles_default\n};\n","import {\n  radio_button_styles_default\n} from \"./chunk.2P5EQCYK.js\";\nimport {\n  HasSlotController\n} from \"./chunk.NYIIDP5N.js\";\nimport {\n  watch\n} from \"./chunk.GMYPQTFK.js\";\nimport {\n  component_styles_default\n} from \"./chunk.TUVJKY7S.js\";\nimport {\n  ShoelaceElement\n} from \"./chunk.PFOQ5QRR.js\";\nimport {\n  __decorateClass\n} from \"./chunk.KAW7D32O.js\";\n\n// src/components/radio-button/radio-button.component.ts\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { html } from \"lit/static-html.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { property, query, state } from \"lit/decorators.js\";\nvar SlRadioButton = class extends ShoelaceElement {\n  constructor() {\n    super(...arguments);\n    this.hasSlotController = new HasSlotController(this, \"[default]\", \"prefix\", \"suffix\");\n    this.hasFocus = false;\n    this.checked = false;\n    this.disabled = false;\n    this.size = \"medium\";\n    this.pill = false;\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAttribute(\"role\", \"presentation\");\n  }\n  handleBlur() {\n    this.hasFocus = false;\n    this.emit(\"sl-blur\");\n  }\n  handleClick(e) {\n    if (this.disabled) {\n      e.preventDefault();\n      e.stopPropagation();\n      return;\n    }\n    this.checked = true;\n  }\n  handleFocus() {\n    this.hasFocus = true;\n    this.emit(\"sl-focus\");\n  }\n  handleDisabledChange() {\n    this.setAttribute(\"aria-disabled\", this.disabled ? \"true\" : \"false\");\n  }\n  /** Sets focus on the radio button. */\n  focus(options) {\n    this.input.focus(options);\n  }\n  /** Removes focus from the radio button. */\n  blur() {\n    this.input.blur();\n  }\n  render() {\n    return html`\n      <div part=\"base\" role=\"presentation\">\n        <button\n          part=\"${`button${this.checked ? \" button--checked\" : \"\"}`}\"\n          role=\"radio\"\n          aria-checked=\"${this.checked}\"\n          class=${classMap({\n      button: true,\n      \"button--default\": true,\n      \"button--small\": this.size === \"small\",\n      \"button--medium\": this.size === \"medium\",\n      \"button--large\": this.size === \"large\",\n      \"button--checked\": this.checked,\n      \"button--disabled\": this.disabled,\n      \"button--focused\": this.hasFocus,\n      \"button--outline\": true,\n      \"button--pill\": this.pill,\n      \"button--has-label\": this.hasSlotController.test(\"[default]\"),\n      \"button--has-prefix\": this.hasSlotController.test(\"prefix\"),\n      \"button--has-suffix\": this.hasSlotController.test(\"suffix\")\n    })}\n          aria-disabled=${this.disabled}\n          type=\"button\"\n          value=${ifDefined(this.value)}\n          @blur=${this.handleBlur}\n          @focus=${this.handleFocus}\n          @click=${this.handleClick}\n        >\n          <slot name=\"prefix\" part=\"prefix\" class=\"button__prefix\"></slot>\n          <slot part=\"label\" class=\"button__label\"></slot>\n          <slot name=\"suffix\" part=\"suffix\" class=\"button__suffix\"></slot>\n        </button>\n      </div>\n    `;\n  }\n};\nSlRadioButton.styles = [component_styles_default, radio_button_styles_default];\n__decorateClass([\n  query(\".button\")\n], SlRadioButton.prototype, \"input\", 2);\n__decorateClass([\n  query(\".hidden-input\")\n], SlRadioButton.prototype, \"hiddenInput\", 2);\n__decorateClass([\n  state()\n], SlRadioButton.prototype, \"hasFocus\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], SlRadioButton.prototype, \"checked\", 2);\n__decorateClass([\n  property()\n], SlRadioButton.prototype, \"value\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], SlRadioButton.prototype, \"disabled\", 2);\n__decorateClass([\n  property({ reflect: true })\n], SlRadioButton.prototype, \"size\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], SlRadioButton.prototype, \"pill\", 2);\n__decorateClass([\n  watch(\"disabled\", { waitUntilFirstUpdate: true })\n], SlRadioButton.prototype, \"handleDisabledChange\", 1);\n\nexport {\n  SlRadioButton\n};\n","import {\n  button_group_styles_default\n} from \"./chunk.2OUC42YY.js\";\nimport {\n  component_styles_default\n} from \"./chunk.TUVJKY7S.js\";\nimport {\n  ShoelaceElement\n} from \"./chunk.PFOQ5QRR.js\";\nimport {\n  __decorateClass\n} from \"./chunk.KAW7D32O.js\";\n\n// src/components/button-group/button-group.component.ts\nimport { html } from \"lit\";\nimport { property, query, state } from \"lit/decorators.js\";\nvar SlButtonGroup = class extends ShoelaceElement {\n  constructor() {\n    super(...arguments);\n    this.disableRole = false;\n    this.label = \"\";\n  }\n  handleFocus(event) {\n    const button = findButton(event.target);\n    button == null ? void 0 : button.toggleAttribute(\"data-sl-button-group__button--focus\", true);\n  }\n  handleBlur(event) {\n    const button = findButton(event.target);\n    button == null ? void 0 : button.toggleAttribute(\"data-sl-button-group__button--focus\", false);\n  }\n  handleMouseOver(event) {\n    const button = findButton(event.target);\n    button == null ? void 0 : button.toggleAttribute(\"data-sl-button-group__button--hover\", true);\n  }\n  handleMouseOut(event) {\n    const button = findButton(event.target);\n    button == null ? void 0 : button.toggleAttribute(\"data-sl-button-group__button--hover\", false);\n  }\n  handleSlotChange() {\n    const slottedElements = [...this.defaultSlot.assignedElements({ flatten: true })];\n    slottedElements.forEach((el) => {\n      const index = slottedElements.indexOf(el);\n      const button = findButton(el);\n      if (button) {\n        button.toggleAttribute(\"data-sl-button-group__button\", true);\n        button.toggleAttribute(\"data-sl-button-group__button--first\", index === 0);\n        button.toggleAttribute(\"data-sl-button-group__button--inner\", index > 0 && index < slottedElements.length - 1);\n        button.toggleAttribute(\"data-sl-button-group__button--last\", index === slottedElements.length - 1);\n        button.toggleAttribute(\n          \"data-sl-button-group__button--radio\",\n          button.tagName.toLowerCase() === \"sl-radio-button\"\n        );\n      }\n    });\n  }\n  render() {\n    return html`\n      <div\n        part=\"base\"\n        class=\"button-group\"\n        role=\"${this.disableRole ? \"presentation\" : \"group\"}\"\n        aria-label=${this.label}\n        @focusout=${this.handleBlur}\n        @focusin=${this.handleFocus}\n        @mouseover=${this.handleMouseOver}\n        @mouseout=${this.handleMouseOut}\n      >\n        <slot @slotchange=${this.handleSlotChange}></slot>\n      </div>\n    `;\n  }\n};\nSlButtonGroup.styles = [component_styles_default, button_group_styles_default];\n__decorateClass([\n  query(\"slot\")\n], SlButtonGroup.prototype, \"defaultSlot\", 2);\n__decorateClass([\n  state()\n], SlButtonGroup.prototype, \"disableRole\", 2);\n__decorateClass([\n  property()\n], SlButtonGroup.prototype, \"label\", 2);\nfunction findButton(el) {\n  var _a;\n  const selector = \"sl-button, sl-radio-button\";\n  return (_a = el.closest(selector)) != null ? _a : el.querySelector(selector);\n}\n\nexport {\n  SlButtonGroup\n};\n","import {\n  radio_group_styles_default\n} from \"./chunk.B63YXDJO.js\";\nimport {\n  form_control_styles_default\n} from \"./chunk.SI4ACBFK.js\";\nimport {\n  SlButtonGroup\n} from \"./chunk.UEYUGH42.js\";\nimport {\n  FormControlController,\n  customErrorValidityState,\n  validValidityState,\n  valueMissingValidityState\n} from \"./chunk.3RPBFEDE.js\";\nimport {\n  HasSlotController\n} from \"./chunk.NYIIDP5N.js\";\nimport {\n  watch\n} from \"./chunk.GMYPQTFK.js\";\nimport {\n  component_styles_default\n} from \"./chunk.TUVJKY7S.js\";\nimport {\n  ShoelaceElement\n} from \"./chunk.PFOQ5QRR.js\";\nimport {\n  __decorateClass\n} from \"./chunk.KAW7D32O.js\";\n\n// src/components/radio-group/radio-group.component.ts\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { html } from \"lit\";\nimport { property, query, state } from \"lit/decorators.js\";\nvar SlRadioGroup = class extends ShoelaceElement {\n  constructor() {\n    super(...arguments);\n    this.formControlController = new FormControlController(this);\n    this.hasSlotController = new HasSlotController(this, \"help-text\", \"label\");\n    this.customValidityMessage = \"\";\n    this.hasButtonGroup = false;\n    this.errorMessage = \"\";\n    this.defaultValue = \"\";\n    this.label = \"\";\n    this.helpText = \"\";\n    this.name = \"option\";\n    this.value = \"\";\n    this.size = \"medium\";\n    this.form = \"\";\n    this.required = false;\n  }\n  /** Gets the validity state object */\n  get validity() {\n    const isRequiredAndEmpty = this.required && !this.value;\n    const hasCustomValidityMessage = this.customValidityMessage !== \"\";\n    if (hasCustomValidityMessage) {\n      return customErrorValidityState;\n    } else if (isRequiredAndEmpty) {\n      return valueMissingValidityState;\n    }\n    return validValidityState;\n  }\n  /** Gets the validation message */\n  get validationMessage() {\n    const isRequiredAndEmpty = this.required && !this.value;\n    const hasCustomValidityMessage = this.customValidityMessage !== \"\";\n    if (hasCustomValidityMessage) {\n      return this.customValidityMessage;\n    } else if (isRequiredAndEmpty) {\n      return this.validationInput.validationMessage;\n    }\n    return \"\";\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.defaultValue = this.value;\n  }\n  firstUpdated() {\n    this.formControlController.updateValidity();\n  }\n  getAllRadios() {\n    return [...this.querySelectorAll(\"sl-radio, sl-radio-button\")];\n  }\n  handleRadioClick(event) {\n    const target = event.target.closest(\"sl-radio, sl-radio-button\");\n    const radios = this.getAllRadios();\n    const oldValue = this.value;\n    if (!target || target.disabled) {\n      return;\n    }\n    this.value = target.value;\n    radios.forEach((radio) => radio.checked = radio === target);\n    if (this.value !== oldValue) {\n      this.emit(\"sl-change\");\n      this.emit(\"sl-input\");\n    }\n  }\n  handleKeyDown(event) {\n    var _a;\n    if (![\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\", \" \"].includes(event.key)) {\n      return;\n    }\n    const radios = this.getAllRadios().filter((radio) => !radio.disabled);\n    const checkedRadio = (_a = radios.find((radio) => radio.checked)) != null ? _a : radios[0];\n    const incr = event.key === \" \" ? 0 : [\"ArrowUp\", \"ArrowLeft\"].includes(event.key) ? -1 : 1;\n    const oldValue = this.value;\n    let index = radios.indexOf(checkedRadio) + incr;\n    if (index < 0) {\n      index = radios.length - 1;\n    }\n    if (index > radios.length - 1) {\n      index = 0;\n    }\n    this.getAllRadios().forEach((radio) => {\n      radio.checked = false;\n      if (!this.hasButtonGroup) {\n        radio.setAttribute(\"tabindex\", \"-1\");\n      }\n    });\n    this.value = radios[index].value;\n    radios[index].checked = true;\n    if (!this.hasButtonGroup) {\n      radios[index].setAttribute(\"tabindex\", \"0\");\n      radios[index].focus();\n    } else {\n      radios[index].shadowRoot.querySelector(\"button\").focus();\n    }\n    if (this.value !== oldValue) {\n      this.emit(\"sl-change\");\n      this.emit(\"sl-input\");\n    }\n    event.preventDefault();\n  }\n  handleLabelClick() {\n    this.focus();\n  }\n  handleInvalid(event) {\n    this.formControlController.setValidity(false);\n    this.formControlController.emitInvalidEvent(event);\n  }\n  async syncRadioElements() {\n    var _a, _b;\n    const radios = this.getAllRadios();\n    await Promise.all(\n      // Sync the checked state and size\n      radios.map(async (radio) => {\n        await radio.updateComplete;\n        radio.checked = radio.value === this.value;\n        radio.size = this.size;\n      })\n    );\n    this.hasButtonGroup = radios.some((radio) => radio.tagName.toLowerCase() === \"sl-radio-button\");\n    if (radios.length > 0 && !radios.some((radio) => radio.checked)) {\n      if (this.hasButtonGroup) {\n        const buttonRadio = (_a = radios[0].shadowRoot) == null ? void 0 : _a.querySelector(\"button\");\n        if (buttonRadio) {\n          buttonRadio.setAttribute(\"tabindex\", \"0\");\n        }\n      } else {\n        radios[0].setAttribute(\"tabindex\", \"0\");\n      }\n    }\n    if (this.hasButtonGroup) {\n      const buttonGroup = (_b = this.shadowRoot) == null ? void 0 : _b.querySelector(\"sl-button-group\");\n      if (buttonGroup) {\n        buttonGroup.disableRole = true;\n      }\n    }\n  }\n  syncRadios() {\n    if (customElements.get(\"sl-radio\") && customElements.get(\"sl-radio-button\")) {\n      this.syncRadioElements();\n      return;\n    }\n    if (customElements.get(\"sl-radio\")) {\n      this.syncRadioElements();\n    } else {\n      customElements.whenDefined(\"sl-radio\").then(() => this.syncRadios());\n    }\n    if (customElements.get(\"sl-radio-button\")) {\n      this.syncRadioElements();\n    } else {\n      customElements.whenDefined(\"sl-radio-button\").then(() => this.syncRadios());\n    }\n  }\n  updateCheckedRadio() {\n    const radios = this.getAllRadios();\n    radios.forEach((radio) => radio.checked = radio.value === this.value);\n    this.formControlController.setValidity(this.validity.valid);\n  }\n  handleSizeChange() {\n    this.syncRadios();\n  }\n  handleValueChange() {\n    if (this.hasUpdated) {\n      this.updateCheckedRadio();\n    }\n  }\n  /** Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid. */\n  checkValidity() {\n    const isRequiredAndEmpty = this.required && !this.value;\n    const hasCustomValidityMessage = this.customValidityMessage !== \"\";\n    if (isRequiredAndEmpty || hasCustomValidityMessage) {\n      this.formControlController.emitInvalidEvent();\n      return false;\n    }\n    return true;\n  }\n  /** Gets the associated form, if one exists. */\n  getForm() {\n    return this.formControlController.getForm();\n  }\n  /** Checks for validity and shows the browser's validation message if the control is invalid. */\n  reportValidity() {\n    const isValid = this.validity.valid;\n    this.errorMessage = this.customValidityMessage || isValid ? \"\" : this.validationInput.validationMessage;\n    this.formControlController.setValidity(isValid);\n    this.validationInput.hidden = true;\n    clearTimeout(this.validationTimeout);\n    if (!isValid) {\n      this.validationInput.hidden = false;\n      this.validationInput.reportValidity();\n      this.validationTimeout = setTimeout(() => this.validationInput.hidden = true, 1e4);\n    }\n    return isValid;\n  }\n  /** Sets a custom validation message. Pass an empty string to restore validity. */\n  setCustomValidity(message = \"\") {\n    this.customValidityMessage = message;\n    this.errorMessage = message;\n    this.validationInput.setCustomValidity(message);\n    this.formControlController.updateValidity();\n  }\n  /** Sets focus on the radio-group. */\n  focus(options) {\n    const radios = this.getAllRadios();\n    const checked = radios.find((radio) => radio.checked);\n    const firstEnabledRadio = radios.find((radio) => !radio.disabled);\n    const radioToFocus = checked || firstEnabledRadio;\n    if (radioToFocus) {\n      radioToFocus.focus(options);\n    }\n  }\n  render() {\n    const hasLabelSlot = this.hasSlotController.test(\"label\");\n    const hasHelpTextSlot = this.hasSlotController.test(\"help-text\");\n    const hasLabel = this.label ? true : !!hasLabelSlot;\n    const hasHelpText = this.helpText ? true : !!hasHelpTextSlot;\n    const defaultSlot = html`\n      <slot @slotchange=${this.syncRadios} @click=${this.handleRadioClick} @keydown=${this.handleKeyDown}></slot>\n    `;\n    return html`\n      <fieldset\n        part=\"form-control\"\n        class=${classMap({\n      \"form-control\": true,\n      \"form-control--small\": this.size === \"small\",\n      \"form-control--medium\": this.size === \"medium\",\n      \"form-control--large\": this.size === \"large\",\n      \"form-control--radio-group\": true,\n      \"form-control--has-label\": hasLabel,\n      \"form-control--has-help-text\": hasHelpText\n    })}\n        role=\"radiogroup\"\n        aria-labelledby=\"label\"\n        aria-describedby=\"help-text\"\n        aria-errormessage=\"error-message\"\n      >\n        <label\n          part=\"form-control-label\"\n          id=\"label\"\n          class=\"form-control__label\"\n          aria-hidden=${hasLabel ? \"false\" : \"true\"}\n          @click=${this.handleLabelClick}\n        >\n          <slot name=\"label\">${this.label}</slot>\n        </label>\n\n        <div part=\"form-control-input\" class=\"form-control-input\">\n          <div class=\"visually-hidden\">\n            <div id=\"error-message\" aria-live=\"assertive\">${this.errorMessage}</div>\n            <label class=\"radio-group__validation\">\n              <input\n                type=\"text\"\n                class=\"radio-group__validation-input\"\n                ?required=${this.required}\n                tabindex=\"-1\"\n                hidden\n                @invalid=${this.handleInvalid}\n              />\n            </label>\n          </div>\n\n          ${this.hasButtonGroup ? html`\n                <sl-button-group part=\"button-group\" exportparts=\"base:button-group__base\" role=\"presentation\">\n                  ${defaultSlot}\n                </sl-button-group>\n              ` : defaultSlot}\n        </div>\n\n        <div\n          part=\"form-control-help-text\"\n          id=\"help-text\"\n          class=\"form-control__help-text\"\n          aria-hidden=${hasHelpText ? \"false\" : \"true\"}\n        >\n          <slot name=\"help-text\">${this.helpText}</slot>\n        </div>\n      </fieldset>\n    `;\n  }\n};\nSlRadioGroup.styles = [component_styles_default, form_control_styles_default, radio_group_styles_default];\nSlRadioGroup.dependencies = { \"sl-button-group\": SlButtonGroup };\n__decorateClass([\n  query(\"slot:not([name])\")\n], SlRadioGroup.prototype, \"defaultSlot\", 2);\n__decorateClass([\n  query(\".radio-group__validation-input\")\n], SlRadioGroup.prototype, \"validationInput\", 2);\n__decorateClass([\n  state()\n], SlRadioGroup.prototype, \"hasButtonGroup\", 2);\n__decorateClass([\n  state()\n], SlRadioGroup.prototype, \"errorMessage\", 2);\n__decorateClass([\n  state()\n], SlRadioGroup.prototype, \"defaultValue\", 2);\n__decorateClass([\n  property()\n], SlRadioGroup.prototype, \"label\", 2);\n__decorateClass([\n  property({ attribute: \"help-text\" })\n], SlRadioGroup.prototype, \"helpText\", 2);\n__decorateClass([\n  property()\n], SlRadioGroup.prototype, \"name\", 2);\n__decorateClass([\n  property({ reflect: true })\n], SlRadioGroup.prototype, \"value\", 2);\n__decorateClass([\n  property({ reflect: true })\n], SlRadioGroup.prototype, \"size\", 2);\n__decorateClass([\n  property({ reflect: true })\n], SlRadioGroup.prototype, \"form\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], SlRadioGroup.prototype, \"required\", 2);\n__decorateClass([\n  watch(\"size\", { waitUntilFirstUpdate: true })\n], SlRadioGroup.prototype, \"handleSizeChange\", 1);\n__decorateClass([\n  watch(\"value\")\n], SlRadioGroup.prototype, \"handleValueChange\", 1);\n\nexport {\n  SlRadioGroup\n};\n","import { html } from 'lit';\n\n// Import Shoelace components\nimport '@shoelace-style/shoelace/dist/components/radio/radio.js';\nimport '@shoelace-style/shoelace/dist/components/radio-button/radio-button.js';\nimport '@shoelace-style/shoelace/dist/components/radio-group/radio-group.js';\nimport '@shoelace-style/shoelace/dist/components/button/button.js';\n\nconst meta = {\n  title: 'Shoelace/Forms/Radio Group',\n  tags: ['autodocs'],\n  render: (args) => html`\n    <sl-radio-group \n      label=${args.label}\n      help-text=${args.helpText || ''}\n      name=${args.name || 'radio'}\n      value=${args.value}\n      size=${args.size || 'medium'}\n      ?required=${args.required}\n    >\n      ${args.useButtons \n        ? html`\n          <sl-radio-button value=\"1\">Option 1</sl-radio-button>\n          <sl-radio-button value=\"2\" ?disabled=${args.hasDisabled}>Option 2</sl-radio-button>\n          <sl-radio-button value=\"3\">Option 3</sl-radio-button>\n        `\n        : html`\n          <sl-radio value=\"1\">Option 1</sl-radio>\n          <sl-radio value=\"2\" ?disabled=${args.hasDisabled}>Option 2</sl-radio>\n          <sl-radio value=\"3\">Option 3</sl-radio>\n        `\n      }\n    </sl-radio-group>\n  `,\n  argTypes: {\n    label: { \n      control: 'text',\n      description: 'The radio group label'\n    },\n    helpText: {\n      control: 'text',\n      description: 'Help text for the radio group'\n    },\n    value: {\n      control: 'select',\n      options: ['1', '2', '3'],\n      description: 'The selected value'\n    },\n    size: {\n      control: 'select',\n      options: ['small', 'medium', 'large'],\n      description: 'The size of the radio buttons'\n    },\n    required: {\n      control: 'boolean',\n      description: 'Makes the radio group required'\n    },\n    useButtons: {\n      control: 'boolean',\n      description: 'Use radio buttons instead of radios'\n    },\n    hasDisabled: {\n      control: 'boolean',\n      description: 'Shows a disabled option'\n    }\n  }\n};\n\nexport default meta;\n\n// Basic radio group\nexport const Basic = {\n  args: {\n    label: 'Select an option',\n    value: '1'\n  }\n};\n\n// With help text\nexport const WithHelpText = {\n  args: {\n    label: 'Select an option',\n    helpText: 'Choose the most appropriate option.',\n    value: '1'\n  }\n};\n\n// Radio buttons\nexport const RadioButtons = {\n  args: {\n    label: 'Select an option',\n    value: '1',\n    useButtons: true\n  }\n};\n\n// Disabled option\nexport const DisabledOption = {\n  args: {\n    label: 'Select an option',\n    value: '1',\n    hasDisabled: true\n  }\n};\n\n// Sizes\nexport const Sizes = {\n  render: () => html`\n    <div style=\"display: flex; flex-direction: column; gap: 2rem;\">\n      <sl-radio-group label=\"Small\" size=\"small\" value=\"1\">\n        <sl-radio value=\"1\">Option 1</sl-radio>\n        <sl-radio value=\"2\">Option 2</sl-radio>\n        <sl-radio value=\"3\">Option 3</sl-radio>\n      </sl-radio-group>\n\n      <sl-radio-group label=\"Medium\" size=\"medium\" value=\"1\">\n        <sl-radio value=\"1\">Option 1</sl-radio>\n        <sl-radio value=\"2\">Option 2</sl-radio>\n        <sl-radio value=\"3\">Option 3</sl-radio>\n      </sl-radio-group>\n\n      <sl-radio-group label=\"Large\" size=\"large\" value=\"1\">\n        <sl-radio value=\"1\">Option 1</sl-radio>\n        <sl-radio value=\"2\">Option 2</sl-radio>\n        <sl-radio value=\"3\">Option 3</sl-radio>\n      </sl-radio-group>\n    </div>\n  `\n};\n\n// Validation\nexport const Validation = {\n  render: () => html`\n    <form class=\"validation\">\n      <sl-radio-group label=\"Select an option\" name=\"option\" required>\n        <sl-radio value=\"1\">Option 1</sl-radio>\n        <sl-radio value=\"2\">Option 2</sl-radio>\n        <sl-radio value=\"3\">Option 3</sl-radio>\n      </sl-radio-group>\n      <br>\n      <sl-button type=\"submit\" variant=\"primary\">Submit</sl-button>\n    </form>\n  `\n}; ;export const __namedExportsOrder = [\"Basic\",\"WithHelpText\",\"RadioButtons\",\"DisabledOption\",\"Sizes\",\"Validation\"];"],"names":[],"sourceRoot":""}